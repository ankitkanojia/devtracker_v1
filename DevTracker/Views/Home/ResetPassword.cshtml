@model ResetPasswordVm

@{
    ViewBag.Title = "ResetPassword";
}

<div class="auth-module border-top-info">
    <div class="form display-block">
        <h1 class="text-danger no-margin text-light">Reset password</h1>
        <p class="no-padding m-b-20">Fill your new credentials</p>


        @using (Html.BeginForm("ResetPassword", "Home", FormMethod.Post, new {id = "frmResetPassword"}))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(s => s.UserMasterId)

            <div class="form-group">
                <div class="form-group has-feedback has-feedback-left">
                    @Html.PasswordFor(s => s.Password, new {@class = "form-control", placeholder = "XXXXXX"})
                    <div class="form-control-feedback">
                        <i class="icon-key"></i>
                    </div>
                </div>
                <div class="form-group has-feedback has-feedback-left">
                    @Html.PasswordFor(s => s.RetypePassword, new {@class = "form-control", placeholder = "XXXXXX"})
                    <div class="form-control-feedback">
                        <i class="icon-key"></i>
                    </div>
                </div>
                <button type="submit" class="btn btn-danger btn-block">Recover password</button>
            </div>
        }
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function() {


            //Form validation HERE
            $("#frmResetPassword").validate({
                rules: {
                    Password: {
                        required: true
                    },
                    RetypePassword: {
                        required: true,
                        equalTo: "#Password"
                    }
                },
                ignore: 'input[type=hidden], .select2-search__field',
                errorClass: 'validation-error',
                highlight: function(element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function(element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                errorPlacement: function(error, element) {
                    if (element.parents('div').hasClass("checker") ||
                        element.parents('div').hasClass("choice") ||
                        element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') ||
                            element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        } else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    } else if (element.parents('div').hasClass('has-feedback') ||
                        element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    } else if (element.parents('label').hasClass('checkbox-inline') ||
                        element.parents('label').hasClass('radio-inline') ||
                        element.parents('div').hasClass('checkbox-single')) {
                        error.appendTo(element.parent().parent());
                    } else if (element.parents('div').hasClass('checkbox-group')) {
                        error.appendTo(element.parent().parent().parent());
                    } else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    } else {
                        error.insertAfter(element);
                    }
                },
                validClass: "validation-success"
            });
        });
    </script>
}