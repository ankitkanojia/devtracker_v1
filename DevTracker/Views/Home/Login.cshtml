@model AccountVm

@{
    ViewBag.Title = "Login";
    Layout = "~/Views/Shared/_BlankLayout.cshtml";
}

<div class="auth-module">
    <div class="toggle">
        <i class="icon-user-plus"></i>
        @*<div class="tip">Click here to register</div>*@
    </div>

    <!-- Login form -->
    @*<div class="form">*@
    <div class="form">
        <h1>Login to your account</h1>
        @using (Html.BeginForm("Login", "Home", FormMethod.Post, new { @class = "form-horizontal", @id = "frmLogin" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(s => s.ReturnUrl)

            <div class="form-group">
                <div class="form-group has-feedback has-feedback-left">
                    @Html.TextBoxFor(s => s.EmailLogin, new { @class = "form-control", @placeholder = "abc@xyz.com" })
                    <div class="form-control-feedback">
                        <i class="icon-envelop"></i>
                    </div>
                </div>
                <div class="form-group has-feedback has-feedback-left">
                    @Html.PasswordFor(s => s.PasswordLogin, new { @class = "form-control", @placeholder = "XXXXXX" })
                    <div class="form-control-feedback">
                        <i class="icon-key"></i>
                    </div>
                </div>
                <div class="login-options">
                    <div class="checkbox">
                        <label>
                            @Html.CheckBoxFor(s => s.IsRemember, new { @class = "styled" })
                            Remember me
                        </label>
                    </div>
                </div>
                <button type="submit" class="btn btn-info btn-block">Sign In</button>
            </div>
        }

    </div>
    <!-- /Login form -->
    <!-- Registration form -->
    <div class="form">
        <h1>Create an account</h1>
        @using (Html.BeginForm("Register", "Home", FormMethod.Post, new { @id = "frmRegister", @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                <div class="form-group has-feedback has-feedback-left">
                    @Html.TextBoxFor(s => s.Name, new { @class = "form-control", @placeholder = "Joe Smith" })
                    <div class="form-control-feedback">
                        <i class="icon-user"></i>
                    </div>
                </div>

                <div class="form-group has-feedback has-feedback-left">
                    @Html.TextBoxFor(s => s.Email, new { @class = "form-control", @placeholder = "abc@xyz.com" })
                    <div class="form-control-feedback">
                        <i class="icon-envelop"></i>
                    </div>
                </div>

                <div class="form-group has-feedback has-feedback-left">
                    @Html.PasswordFor(s => s.Password, new { @class = "form-control", @placeholder = "XXXXXX" })
                    <div class="form-control-feedback">
                        <i class="icon-key"></i>
                    </div>
                </div>
                <div class="form-group has-feedback has-feedback-left">
                    @Html.PasswordFor(s => s.RetypePassword, new { @class = "form-control", @placeholder = "XXXXXX" })
                    <div class="form-control-feedback">
                        <i class="icon-key"></i>
                    </div>
                </div>
                <div class="form-group has-feedback has-feedback-left">
                    @Html.TextBoxFor(s => s.Mobile, new { @maxlength = "10", @class = "form-control", @placeholder = "99xxxxxxxx" })
                    <div class="form-control-feedback">
                        <i class="icon-mobile"></i>
                    </div>
                </div>
                <div class="login-options">
                    <div class="checkbox">
                        <label>
                            @Html.CheckBoxFor(s => s.IsMailAccountDetails, new { @class = "styled" })
                            Mail me my account details
                        </label>
                    </div>
                    <div class="form-group">
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(s => s.IsTermsAndCondition, new { @class = "styled" })
                                Accept <a href="#">terms &amp; conditions</a>
                            </label>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-info btn-block">Create my account</button>
            </div>
        }
    </div>
    <!-- /Registeration form -->

    <div class="forgot">
        <a href="@Url.Action("RecoverPassword", "Home")">Recover your password?</a>
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            //Login Form validation HERE
            $("#frmLogin").validate({
                rules: {
                    EmailLogin: {
                        required: true,
                        email: true
                    },
                    PasswordLogin: {
                        required: true
                    }
                },
                ignore: 'input[type=hidden], .select2-search__field',
                errorClass: 'validation-error',
                highlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                errorPlacement: function (error, element) {
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        } else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    } else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    } else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline') || element.parents('div').hasClass('checkbox-single')) {
                        error.appendTo(element.parent().parent());
                    } else if (element.parents('div').hasClass('checkbox-group')) {
                        error.appendTo(element.parent().parent().parent());
                    } else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    } else {
                        error.insertAfter(element);
                    }
                },
                validClass: "validation-success"
            });

            //Registration Form validation HERE
            $("#frmRegister").validate({
                rules: {
                    Email: {
                        required: true,
                        email: true
                    },
                    Name: {
                        required: true
                    },
                    Password: {
                        required: true
                    },
                    RetypePassword: {
                        required: true,
                        equalTo: "#Password"
                    },
                    Mobile: {
                        required: true,
                        number: true,
                        minlength: 10
                    },
                    IsTermsAndCondition: {
                        required: true
                    }
                },
                ignore: 'input[type=hidden], .select2-search__field',
                errorClass: 'validation-error',
                successClass: 'validation-success',
                highlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function (element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                errorPlacement: function (error, element) {
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container')) {
                        if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo(element.parent().parent().parent().parent());
                        } else {
                            error.appendTo(element.parent().parent().parent().parent().parent());
                        }
                    } else if (element.parents('div').hasClass('has-feedback') || element.hasClass('select2-hidden-accessible')) {
                        error.appendTo(element.parent());
                    } else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline') || element.parents('div').hasClass('checkbox-single')) {
                        error.appendTo(element.parent().parent());
                    } else if (element.parents('div').hasClass('checkbox-group')) {
                        error.appendTo(element.parent().parent().parent());
                    } else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo(element.parent().parent());
                    } else {
                        error.insertAfter(element);
                    }
                },
                validClass: "validation-success",
                success: function (label) {
                    label.addClass("validation-success").text("Done");
                }
            });
        });
    </script>
}

